# -*- coding: utf-8 -*-
"""ml project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18pPFvvSIrvISF_8BNkGB2xskrQaMHBCp

importing dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import joblib

# loading the csv data to a Pandas DataFrame
heart_data = pd.read_csv('heart.csv')

# print first 5 rows of the dataset
heart_data.head()

# print last 5 rows of the dataset
heart_data.tail()

# Plot the data
heart_data.plot()
plt.title(' Data')
plt.show()

# number of rows and columns in the dataset
heart_data.shape
print(heart_data.shape)

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 --> Defective Heart

0 --> Healthy Heart

Splitting the Features and Target
"""

# Plotting a histogram for each feature
heart_data.hist(bins=15, figsize=(15, 10))
plt.suptitle('Feature Distribution')
plt.show()

# Correlation matrix
plt.figure(figsize=(12, 8))
sns.heatmap(heart_data.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(X)

print(Y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Accuracy Score
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

"""Building a Predictive System"""

input_data = (34,0,1,118,210,0,1,192,0,0.7,2,0,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

!pip install gradio
import gradio as gr

# Gradio Interface Function
def predict_heart_disease(age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal):
    input_data = (age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal)
    input_data_as_numpy_array = np.asarray(input_data)
    input_data_reshaped = input_data_as_numpy_array.reshape(1, -1)

    prediction = model.predict(input_data_reshaped)

    if prediction[0] == 0:
        return "The Person does not have Heart Disease"
    else:
        return "The Person has Heart Disease"

# Create the Gradio interface
interface = gr.Interface(
    fn=predict_heart_disease,
   inputs=[
        gr.Number(label="Age"),
        gr.Radio(label="Sex (1 = Male, 0 = Female)", choices=[1, 0]),
        gr.Radio(label="Chest Pain Type (0 = Typical angina, 1 = Atypical angina, 2 = Non-anginal pain, 3 = Asymptomatic)", choices=[0, 1, 2, 3]),
        gr.Number(label="Resting Blood Pressure (trestbps)"),
        gr.Number(label="Serum Cholestoral in mg/dl (chol)"),
        gr.Radio(label="Fasting Blood Sugar > 120 mg/dl (1 = True; 0 = False)", choices=[1, 0]),
        gr.Radio(label="Resting ECG results (0 = Normal, 1 = Having ST-T wave abnormality, 2 = Showing probable or definite left ventricular hypertrophy)", choices=[0, 1, 2]),
        gr.Number(label="Maximum Heart Rate Achieved (thalach)"),
        gr.Radio(label="Exercise Induced Angina (1 = Yes, 0 = No)", choices=[1, 0]),
        gr.Number(label="Oldpeak"),
        gr.Radio(label="Slope of the Peak Exercise ST segment (0 = Upsloping, 1 = Flat, 2 = Downsloping)", choices=[0, 1, 2]),
        gr.Number(label="Number of Major Vessels (ca) colored by fluoroscopy"),
        gr.Radio(label="Thal (1 = Normal, 2 = Fixed Defect, 3 = Reversible Defect)", choices=[1, 2, 3])
    ],
    outputs="text",
    title="Heart Disease Prediction",
    description="Enter the values for the following medical attributes to predict the likelihood of heart disease."
)

# Launch the Gradio interface
interface.launch()

